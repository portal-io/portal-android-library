package com.whaley.core.bi.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BIBEAN".
*/
public class BIBeanDao extends AbstractDao<BIBean, String> {

    public static final String TABLENAME = "BIBEAN";

    /**
     * Properties of entity BIBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Itemid = new Property(0, String.class, "itemid", true, "ITEMID");
        public final static Property Metadata = new Property(1, String.class, "metadata", false, "METADATA");
        public final static Property LogInfo = new Property(2, String.class, "logInfo", false, "LOG_INFO");
    }


    public BIBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BIBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BIBEAN\" (" + //
                "\"ITEMID\" TEXT PRIMARY KEY NOT NULL ," + // 0: itemid
                "\"METADATA\" TEXT," + // 1: metadata
                "\"LOG_INFO\" TEXT);"); // 2: logInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BIBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BIBean entity) {
        stmt.clearBindings();
 
        String itemid = entity.getItemid();
        if (itemid != null) {
            stmt.bindString(1, itemid);
        }
 
        String metadata = entity.getMetadata();
        if (metadata != null) {
            stmt.bindString(2, metadata);
        }
 
        String logInfo = entity.getLogInfo();
        if (logInfo != null) {
            stmt.bindString(3, logInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BIBean entity) {
        stmt.clearBindings();
 
        String itemid = entity.getItemid();
        if (itemid != null) {
            stmt.bindString(1, itemid);
        }
 
        String metadata = entity.getMetadata();
        if (metadata != null) {
            stmt.bindString(2, metadata);
        }
 
        String logInfo = entity.getLogInfo();
        if (logInfo != null) {
            stmt.bindString(3, logInfo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BIBean readEntity(Cursor cursor, int offset) {
        BIBean entity = new BIBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // itemid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // metadata
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // logInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BIBean entity, int offset) {
        entity.setItemid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMetadata(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogInfo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BIBean entity, long rowId) {
        return entity.getItemid();
    }
    
    @Override
    public String getKey(BIBean entity) {
        if(entity != null) {
            return entity.getItemid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BIBean entity) {
        return entity.getItemid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
